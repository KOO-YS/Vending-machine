import error.NotSufficientMoneyException;
import product.Product;
import sale.VendingMachine;
import user.Customer;
import user.Manager;
import user.User;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Iterator;

public class Main {
    public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    public static VendingMachine vendingMachine = VendingMachine.getInstance();
    public static int autoGenerated = 10;
    public static void main(String[] args) throws IOException {
        console();
    }

    public static void console() throws IOException {
        User user = null;

        int userNum = 0;
        // 유저 선택
        while (user == null) {
            System.out.println("Customer : 1 \nManager : 2");
            userNum = inputINT();

            if (userNum == 1)
                user = Customer.builder()
                        .budget(10000)
                        .build();

            else if (userNum == 2)
                user = new Manager();
        }

        int cmd = 0;
        // 소비자
        if (userNum == 1) {
            while (cmd <= 3) {
                System.out.println(
                        "자판기에 금액 충전 : 1 \n" +
                                "물건 선택 : 2 \n" +
                                "거스름돈 환불 : 3\n" +
                                "유저를 다시 선택하기 위해서는 4 이상의 숫자를 누르세요");
                cmd = inputINT();
                commandCustomer((Customer) user, cmd);
            }
        }
        // 매니저
        else {  // (userNum == 2)
            while (cmd <= 3) {
                System.out.println(
                        "상품 추가 : 1\n" +
                                "상품 제거 : 2\n" +
                                "상품 금액 변경 : 3\n"+
                                "유저를 다시 선택하기 위해서는 4 이상의 숫자를 누르세요"
                );
                cmd = inputINT();
                commandManager((Manager)user, cmd);
            }
        }
        System.out.println("다른 유저로 접속하시겠습니까? (y/n)");
        if(br.readLine().equalsIgnoreCase("Y")) console();
    }


    public static int inputINT() {
        try {
            return Integer.parseInt(br.readLine().trim());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }

    private static void commandCustomer(Customer customer, int cmd) {
        switch (cmd) {
            case 1 :
                System.out.println("충전할 금액 입력 :");
                customer.chargeBalance(inputINT());
                System.out.println("자판기에 총 "+vendingMachine.getBalance()+"원이 충전되어 있습니다");
                break;

            case 2 :
                if(printMachine()) {
                    Product product = customer.chooseProduct(inputINT());
                    System.out.println(product + " 물건을 받고, 자판기에 총 " + vendingMachine.getBalance() + "원이 남아 있습니다");
                }
                break;

            case 3 :
                System.out.println("총 "+ customer.refundChange() +"를 거슬러 받았습니다.");
                
                break;
            default:
                System.out.println("invalid num");
        }
    }

    private static void commandManager(Manager user, int cmd) throws IOException {
        String name;
        int price;
        int stock;
        int idx;
        Product product;
        switch (cmd) {
            case 1:
                System.out.println("상품명 입력 : ");
                name = br.readLine().trim();
                System.out.println("상품 금액 입력 :");
                price = inputINT();
                System.out.println("추가 수량");
                stock = inputINT();

                product = Product.builder().idx(autoGenerated++).name(name).price(price).build();
                user.makeStock(product, stock);
                System.out.println("상품 추가 완료 "+product);
                break;
            case 2:
                if (printMachine()) {
                    System.out.println("제거할 상품 번호 입력 : ");
                    idx = inputINT();

                    user.stockOut(idx);
                    System.out.println("상품이 제거되었습니다");
                }
                break;

            case 3:
                if (printMachine()) {
                    System.out.println("금액을 변경할 상품 번호 입력 :");
                    idx = inputINT();
                    System.out.println("변경할 금액 입력 :");
                    price = inputINT();

                    user.updateProduct(idx, price);
                }
                break;

            default:
                System.out.println("invalid num");
        }
    }

    private static boolean printMachine() {
        Iterator i = vendingMachine.stockIterator();
        if (!i.hasNext()) {
            System.out.println("선택 가능한 물품이 없습니다");
            return false;
        }
        while(i.hasNext()) {
            System.out.println(i.next());
        }
        return true;
    }
}
